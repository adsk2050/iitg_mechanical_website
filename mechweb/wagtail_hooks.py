from datetime import datetime

from django.utils.safestring import mark_safe

from django.utils.text import slugify
from django.db.models.signals import post_save, pre_delete
from django.dispatch import receiver

from wagtail.core import hooks

from .models import CustomUser, FacultyHomePage, FacultyPage, StudentHomePage, StudentPage, AlumniHomePage, AlumnusPage, StaffHomePage, StaffPage, MechHomePage

######################################################


@receiver(post_save, sender=CustomUser)  # Can't use pre save cuz then user model won't be created and then the user onetoonekey field will raise error
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        if instance.user_type == "0":
            try:
                home = FacultyHomePage.objects.all()[0]  # Now be careful here as if there will be more than one facultyHomePage then there will be a problem
            except IndexError:
                # try:
                # 	mech_home = MechHomePage.objects.all()[0]
                # 	home = FacultyPage(
                # 		title='Faculty',
                # 		slug='faculty',
                # 		intro='Faculty Home Page',
                # 	)
                # 	mech_home.add_child(instance=mech_home)
                # except IndexError:
                print("First create FacultyHomePage.. User profile not created")
                return
            if instance.middle_name == "":
                base_title = instance.first_name + " " + instance.last_name
            base_title = instance.first_name + " " + instance.middle_name + " " + instance.last_name
            try:
                base_slug = FacultyPage()._get_autogenerated_slug(slugify(instance.username))
            except:
                base_slug = FacultyPage()._get_autogenerated_slug(slugify(base_title))
            new_faculty = FacultyPage(
                title=base_title,
                slug=base_slug,
                user=instance,
                first_name=instance.first_name,
                middle_name=instance.middle_name,
                last_name=instance.last_name,
                email_id=instance.email,
                owner=instance,
            )
            home.add_child(instance=new_faculty)
            home.save()
        elif instance.user_type == "1":
            home = StudentHomePage.objects.all()[0]
            if instance.middle_name == "":
                base_title = instance.first_name + " " + instance.last_name
            base_title = instance.first_name + " " + instance.middle_name + " " + instance.last_name
            try:
                base_slug = StudentPage()._get_autogenerated_slug(slugify(instance.username))
            except:
                base_slug = StudentPage()._get_autogenerated_slug(slugify(base_title))
            roll_no = instance.uid
            reverse_roll = roll_no[::-1]
            enrolment_year = datetime.strptime("Aug 1 20" + reverse_roll[8:6:-1] + " 12:00PM", "%b %d %Y %I:%M%p")
            PROG = {"01": "0", "41": "1", "61": "2"}
            try:
                programme = PROG[reverse_roll[6:4:-1]]
            except KeyError:
                programme = "3"

            is_exchange = False
            if roll_no[0] == ("x" or "X"):
                roll_no[0] = "x"
                is_exchange = True

            new_student = StudentPage(
                title=base_title,
                slug=base_slug,
                user=instance,
                first_name=instance.first_name,
                middle_name=instance.middle_name,
                last_name=instance.last_name,
                email_id=instance.email,
                owner=instance,
                roll_no=roll_no,
                enrolment_year=enrolment_year,
                programme=programme,
                is_exchange=is_exchange,
            )
            home.add_child(instance=new_student)
            home.save()
        elif instance.user_type == "2":
            home = AlumniHomePage.objects.all()[0]
            if instance.middle_name == "":
                base_title = instance.first_name + " " + instance.last_name
            base_title = instance.first_name + " " + instance.middle_name + " " + instance.last_name
            try:
                base_slug = AlumnusPage()._get_autogenerated_slug(slugify(instance.username))
            except:
                base_slug = AlumnusPage()._get_autogenerated_slug(slugify(base_title))

            roll_no = instance.uid
            reverse_roll = roll_no[::-1]
            enrolment_year = datetime.strptime("Aug 1 20" + reverse_roll[8:6:-1] + " 12:00PM", "%b %d %Y %I:%M%p")
            PROG = {"01": "0", "41": "1", "61": "2"}
            try:
                programme = PROG[reverse_roll[6:4:-1]]
            except KeyError:
                programme = "3"

            is_exchange = False
            if roll_no[0] == ("x" or "X"):
                roll_no[0] = "x"
                is_exchange = True

            new_alum = AlumnusPage(
                title=base_title,
                slug=base_slug,
                user=instance,
                first_name=instance.first_name,
                middle_name=instance.middle_name,
                last_name=instance.last_name,
                email_id=instance.email,
                owner=instance,
                roll_no=roll_no,
                enrolment_year=enrolment_year,
                programme=programme,
                is_exchange=is_exchange,
            )
            home.add_child(instance=new_alum)
            home.save()
        elif instance.user_type == "3":
            home = StaffHomePage.objects.all()[0]
            if instance.middle_name == "":
                base_title = instance.first_name + " " + instance.last_name
            base_title = instance.first_name + " " + instance.middle_name + " " + instance.last_name
            try:
                base_slug = StaffPage()._get_autogenerated_slug(slugify(instance.username))
            except:
                base_slug = StaffPage()._get_autogenerated_slug(slugify(base_title))
            new_staff = StaffPage(
                title=base_title,
                slug=base_slug,
                user=instance,
                first_name=instance.first_name,
                middle_name=instance.middle_name,
                last_name=instance.last_name,
                email_id=instance.email,
                owner=instance,
            )
            home.add_child(instance=new_staff)
            home.save()
        else:
            pass


@receiver(pre_delete, sender=CustomUser)
def delete_user_profile(sender, instance, using, **kwargs):
    """What happens when a user is deleted"""
    if instance.user_type == "0":
        try:
            print("Getting faculty...")
            faculty = FacultyPage.objects.get(owner=instance)
            print("Got faculty: ", faculty)
            faculty.delete()
            print("Faculty deleted...")
        except:
            print(instance.get_user_type_display, "type user deleted, was not associated with any person profile ")
    elif instance.user_type == "1":
        try:
            print("Getting student...")
            student = StudentPage.objects.get(owner=instance)
            print("Got student: ", student)
            student.delete()
            print("Student deleted...")
        except:
            print(instance.get_user_type_display, "type user deleted, was not associated with any person profile ")
    elif instance.user_type == "2":
        try:
            print("Getting alumnus...")
            alumnus = AlumnusPage.objects.get(owner=instance)
            print("Got alumnus: ", alumnus)
            alumnus.delete()
            print("Alumnus deleted...")

        except:
            print(instance.get_user_type_display, "type user deleted, was not associated with any person profile ")
    elif instance.user_type == "3":
        try:
            print("Getting staff...")
            staff = StaffPage.objects.get(owner=instance)
            print("Got staff: ", staff)
            staff.delete()
            print("Staff deleted...")
        except:
            print(instance.get_user_type_display, "type user deleted, was not associated with any person profile ")
    else:
        pass


class WelcomePanel:
    order = 50

    def render(self):
        return mark_safe(
            """
        <section class="panel summary nice-padding">
          <h3>Welcome to IITG Mechanical Department website content management interface. Only edit the items related to you. Don't edit others' data. All edits are associated with editor ID.</h3>
        </section>
        """
        )


@hooks.register("construct_homepage_panels")
def add_another_welcome_panel(request, panels):
    panels.append(WelcomePanel())


# @hooks.register()

# @hooks.register('construct_explorer_page_queryset')
# def show_my_profile_only(parent_page, pages, request):
#     # If we're in the 'user-profiles' section, only show the user's own profile
#     if parent_page.slug == ('faculty' or 'student' or 'staff'):
#         pages = pages.filter(owner=request.user)

#     return pages

# @hooks.register('construct_main_menu')
# def show_respective_user_profile(request, menu_items):
#   if request.user.username == 'frank':
#     menu_items[:] = [item for item in menu_items if item.name != 'explorer']

# @hooks.register('construct_explorer_page_queryset')
# def show_my_profile_only(parent_page, pages, request):
#     # If we're in the 'user-profiles' section, only show the user's own profile
#     if parent_page.slug=='faculty' and request.user.user_type=='0':
#         pages = pages.filter(owner=request.user)
#     elif parent_page.slug=='student' and request.user.user_type=='1':
#     	pages = pages.filter(owner=request.user)
#     elif parent_page.slug=='staff' and request.user.user_type=='3':
#     	pages = pages.filter(owner=request.user)
#     elif parent_page.slug=='alumni' and request.user.user_type=='2':
#     	pages = pages.filter(owner=request.user)
#     else:
#     	pass
#     return pages

# from mechweb.models import CustomUser, FacultyHomePage, FacultyPage, StudentHomePage, StudentPage, AlumniHomePage, AlumnusPage, StaffHomePage, StaffPage

# for user in StudentPage.objects.all():
# 	if user.middle_name == '':
# 		base_title = user.first_name+" "+user.last_name
# 	base_title = user.first_name+" "+user.middle_name+" "+user.last_name
# 	user.title=base_title
# 	user.save()

# for user in AlumnusPage.objects.all():
# 	if user.middle_name == '':
# 		base_title = user.first_name+" "+user.last_name
# 	base_title = user.first_name+" "+user.middle_name+" "+user.last_name
# 	user.title=base_title
# 	user.save()


# for user in FacultyPage.objects.all():
# 	if user.middle_name == '':
# 		base_title = user.first_name+" "+user.last_name
# 	base_title = user.first_name+" "+user.middle_name+" "+user.last_name
# 	user.title=base_title
# 	user.save()


# for user in StaffPage.objects.all():
# 	if user.middle_name == '':
# 		base_title = user.first_name+" "+user.last_name
# 	base_title = user.first_name+" "+user.middle_name+" "+user.last_name
# 	user.title=base_title
# 	user.save()
